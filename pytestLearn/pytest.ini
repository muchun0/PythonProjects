[pytest]

# 添加默认的命令行选项
# 这里的选项将在每次运行 pytest 时自动添加
addopts = --verbose --tb=short --color=yes

# 指定 pytest 应该查找哪些文件作为测试文件
# 默认为以 test_ 开头或以 _test 结尾的 Python 文件，或者包含 pytest_mark 的文件
python_files = test_*.py *_test.py test_*.pyw

# 指定测试类或函数的名字模式
python_classes = Test*
python_functions = test_*

# 禁用某些 pytest 插件
# plugins = -pluginname

# 启用某些 pytest 插件
# plugins = pluginname

# 如果使用 pytest-xdist 进行并行测试，可以设置 worker 进程数
# 例如：addopts = -n auto

# 如果使用 pytest-cov 进行覆盖率报告，可以设置覆盖率选项
# 例如：addopts = --cov=my_package --cov-report=term-missing:skip-covered

# 设置 pytest-sugar 插件的某些选项（如果使用了 pytest-sugar）
# 注意：pytest-sugar 的选项通常直接在命令行设置或通过其他方式，而非 pytest.ini

# 如果需要为某些测试提供自定义的 markers，可以在这里指定
# markers =
#     slow: marks tests as slow (deselect with '-m "not slow"')
#     integration: marks tests requiring an external system

# 配置日志输出
# log_cli = true
# log_cli_level = INFO
# log_cli_format = %(asctime)s [%(levelname)s] %(message)s (%(filename)s:%(lineno)d)
# log_cli_date_format = %Y-%m-%d %H:%M:%S

# 自定义 pytest 的 junitxml 报告格式
# junit_family = xunit2

# 设置默认的 pytest-html 报告文件名（如果使用了 pytest-html 插件）
# html = test_report.html

# 其他 pytest 插件的特定配置也可以在这里设置
# ...

# 需要注意的是，虽然 pytest.ini 支持设置许多 pytest 的配置项，但它并不支持直接编写 Python 代码。
# 如果需要编写 Python 代码来定义 fixture、hooks 或其他复杂的配置，你应该在 conftest.py 文件中进行。

# 例如，在 conftest.py 中定义 fixture：
# conftest.py
#
# import pytest
#
# @pytest.fixture
# def my_fixture():
#     return "some value"